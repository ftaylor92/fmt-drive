0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node',
1 verbose cli   '/usr/local/bin/npm',
1 verbose cli   'install',
1 verbose cli   '-g',
1 verbose cli   'plugman' ]
2 info using npm@1.3.21
3 info using node@v0.10.24
4 verbose cache add [ 'plugman', null ]
5 verbose cache add name=undefined spec="plugman" args=["plugman",null]
6 verbose parsed url { protocol: null,
6 verbose parsed url   slashes: null,
6 verbose parsed url   auth: null,
6 verbose parsed url   host: null,
6 verbose parsed url   port: null,
6 verbose parsed url   hostname: null,
6 verbose parsed url   hash: null,
6 verbose parsed url   search: null,
6 verbose parsed url   query: null,
6 verbose parsed url   pathname: 'plugman',
6 verbose parsed url   path: 'plugman',
6 verbose parsed url   href: 'plugman' }
7 silly lockFile 3c17847d-plugman plugman
8 verbose lock plugman /home/ftaylor92/.npm/3c17847d-plugman.lock
9 silly lockFile 3c17847d-plugman plugman
10 silly lockFile 3c17847d-plugman plugman
11 verbose addNamed [ 'plugman', '' ]
12 verbose addNamed [ null, '*' ]
13 silly lockFile 9ad59204-plugman plugman@
14 verbose lock plugman@ /home/ftaylor92/.npm/9ad59204-plugman.lock
15 silly addNameRange { name: 'plugman', range: '*', hasData: false }
16 verbose url raw plugman
17 verbose url resolving [ 'https://registry.npmjs.org/', './plugman' ]
18 verbose url resolved https://registry.npmjs.org/plugman
19 info trying registry request attempt 1 at 14:04:32
20 verbose etag "76KZT6N5WDDKB950J1DFUWGJD"
21 http GET https://registry.npmjs.org/plugman
22 http 304 https://registry.npmjs.org/plugman
23 silly registry.get cb [ 304,
23 silly registry.get   { date: 'Mon, 24 Mar 2014 18:04:32 GMT',
23 silly registry.get     server: 'Apache',
23 silly registry.get     via: '1.1 varnish',
23 silly registry.get     'last-modified': 'Mon, 24 Mar 2014 18:04:32 GMT',
23 silly registry.get     'cache-control': 'max-age=1',
23 silly registry.get     etag: '"76KZT6N5WDDKB950J1DFUWGJD"',
23 silly registry.get     'x-served-by': 'cache-jfk1026-JFK',
23 silly registry.get     'x-cache': 'MISS',
23 silly registry.get     'x-cache-hits': '0',
23 silly registry.get     'x-timer': 'S1395684272.563581467,VS0,VE113',
23 silly registry.get     vary: 'Accept',
23 silly registry.get     'content-length': '0',
23 silly registry.get     'keep-alive': 'timeout=10, max=50',
23 silly registry.get     connection: 'Keep-Alive' } ]
24 verbose etag plugman from cache
25 silly addNameRange number 2 { name: 'plugman', range: '*', hasData: true }
26 silly addNameRange versions [ 'plugman',
26 silly addNameRange   [ '0.5.6',
26 silly addNameRange     '0.5.7',
26 silly addNameRange     '0.5.8',
26 silly addNameRange     '0.5.9',
26 silly addNameRange     '0.6.0',
26 silly addNameRange     '0.6.1',
26 silly addNameRange     '0.6.2',
26 silly addNameRange     '0.6.3',
26 silly addNameRange     '0.7.0',
26 silly addNameRange     '0.7.1',
26 silly addNameRange     '0.7.2',
26 silly addNameRange     '0.7.3',
26 silly addNameRange     '0.7.4',
26 silly addNameRange     '0.7.5',
26 silly addNameRange     '0.7.6',
26 silly addNameRange     '0.7.7',
26 silly addNameRange     '0.7.8',
26 silly addNameRange     '0.7.9',
26 silly addNameRange     '0.7.10',
26 silly addNameRange     '0.7.11',
26 silly addNameRange     '0.7.12',
26 silly addNameRange     '0.7.13',
26 silly addNameRange     '0.7.14',
26 silly addNameRange     '0.8.0',
26 silly addNameRange     '0.8.1',
26 silly addNameRange     '0.8.2',
26 silly addNameRange     '0.9.0',
26 silly addNameRange     '0.9.1',
26 silly addNameRange     '0.9.2',
26 silly addNameRange     '0.9.3',
26 silly addNameRange     '0.9.4',
26 silly addNameRange     '0.9.5',
26 silly addNameRange     '0.9.6',
26 silly addNameRange     '0.9.7',
26 silly addNameRange     '0.9.8',
26 silly addNameRange     '0.9.9',
26 silly addNameRange     '0.9.10',
26 silly addNameRange     '0.9.11',
26 silly addNameRange     '0.9.20',
26 silly addNameRange     '0.9.21',
26 silly addNameRange     '0.9.22',
26 silly addNameRange     '0.9.23',
26 silly addNameRange     '0.10.0',
26 silly addNameRange     '0.10.1',
26 silly addNameRange     '0.11.0',
26 silly addNameRange     '0.12.0',
26 silly addNameRange     '0.13.0',
26 silly addNameRange     '0.14.0',
26 silly addNameRange     '0.15.0',
26 silly addNameRange     '0.16.0',
26 silly addNameRange     '0.17.0',
26 silly addNameRange     '0.18.0',
26 silly addNameRange     '0.19.0',
26 silly addNameRange     '0.20.0',
26 silly addNameRange     '0.20.1',
26 silly addNameRange     '0.20.2' ] ]
27 verbose addNamed [ 'plugman', '0.20.2' ]
28 verbose addNamed [ '0.20.2', '0.20.2' ]
29 silly lockFile ebfceccf-plugman-0-20-2 plugman@0.20.2
30 verbose lock plugman@0.20.2 /home/ftaylor92/.npm/ebfceccf-plugman-0-20-2.lock
31 silly lockFile ebfceccf-plugman-0-20-2 plugman@0.20.2
32 silly lockFile ebfceccf-plugman-0-20-2 plugman@0.20.2
33 silly lockFile 9ad59204-plugman plugman@
34 silly lockFile 9ad59204-plugman plugman@
35 silly resolved [ { author: { name: 'Andrew Lunny', email: 'alunny@gmail.com' },
35 silly resolved     name: 'plugman',
35 silly resolved     description: 'install/uninstall Cordova plugins',
35 silly resolved     version: '0.20.2',
35 silly resolved     repository:
35 silly resolved      { type: 'git',
35 silly resolved        url: 'git://git-wip-us.apache.org/repos/asf/cordova-plugman.git' },
35 silly resolved     bugs:
35 silly resolved      { url: 'https://issues.apache.org/jira/browse/CB',
35 silly resolved        email: 'dev@cordova.apache.org' },
35 silly resolved     main: 'plugman.js',
35 silly resolved     engines: { node: '>=0.9.9' },
35 silly resolved     engineStrict: true,
35 silly resolved     dependencies:
35 silly resolved      { nopt: '1.0.x',
35 silly resolved        glob: '3.2.x',
35 silly resolved        elementtree: '0.1.5',
35 silly resolved        xcode: '0.6.6',
35 silly resolved        'plist-with-patches': '0.5.x',
35 silly resolved        'bplist-parser': '0.0.x',
35 silly resolved        shelljs: '0.1.x',
35 silly resolved        underscore: '1.4.4',
35 silly resolved        'dep-graph': '1.1.0',
35 silly resolved        semver: '2.0.x',
35 silly resolved        q: '~0.9',
35 silly resolved        npm: '1.3.4',
35 silly resolved        rc: '0.3.0',
35 silly resolved        tar: '0.1.x',
35 silly resolved        request: '2.22.0' },
35 silly resolved     devDependencies: { 'jasmine-node': '1.7.0', osenv: '0.0.x' },
35 silly resolved     bin: { plugman: './main.js' },
35 silly resolved     scripts: { test: 'jasmine-node --color spec' },
35 silly resolved     contributors:
35 silly resolved      [ [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object] ],
35 silly resolved     readme: '# plugman\n\nA command line tool to install and uninstall plugins for use with [Apache Cordova](http://cordova.io) projects.\n\nThis document defines tool usage.\n\n## Requirements\n\nYou must have `git` on your PATH to be able to install plugins directly from remote git URLs.\n\n## Plugin Specification\n\n--&gt; [Available on docs.cordova.io](http://cordova.apache.org/docs/en/3.0.0/plugin_ref_spec.md) &lt;--\n\n## Quickstart\n\n    npm install -g plugman\n\n## Design Goals\n\n* Facilitate programmatic installation and manipulation of plugins\n* Detail the dependencies and components of individual plugins\n* Allow code reuse between different target platforms\n\n## Supported Platforms\n\n* iOS\n* Amazon Fire OS\n* Android\n* BlackBerry 10\n* Windows Phone (7+8)\n* Windows 8\n\n## Command Line Usage\n    plugman help\n\n* Displays all available plugman commands\n\n\n    plugman install --platform <ios|amazon-fireos|android|blackberry10|wp7|wp8> --project <directory> --plugin <name|url|path> [--plugins_dir <directory>] [--www <directory>] [--variable <name>=<value> [--variable <name>=<value> ...]]\n    plugman uninstall --platform <ios|amazon-fireos|android|blackberr10|wp7|wp8> --project <directory> --plugin <id> [--www <directory>] [--plugins_dir <directory>]\n\n* Using minimum parameters, installs a plugin into a cordova project. You must specify a platform and cordova project location for that platform. You also must specify a plugin, with the different `--plugin` parameter forms being:\n  * `name`: The directory name where the plugin contents exist. This must be an existing directory under the `--plugins_dir` path (see below for more info) or a plugin in the Cordova registry.\n  * `url`: A URL starting with https:// or git://, pointing to a valid git repository that is clonable and contains a `plugin.xml` file. The contents of this repository would be copied into the `--plugins_dir`.\n  * `path`: A path to a directory containing a valid plugin which includes a `plugin.xml` file. This path\'s contents will be copied into the `--plugins_dir`.\n* `--uninstall`: Uninstalls an already-`--install`\'ed plugin from a cordova project. Specify the plugin ID.\n\nOther parameters:\n\n* `--plugins_dir` defaults to `<project>/cordova/plugins`, but can be any directory containing a subdirectory for each fetched plugin.\n* `--www` defaults to the project\'s `www` folder location, but can be any directory that is to be used as cordova project application web assets.\n* `--variable` allows to specify certain variables at install time, necessary for certain plugins requiring API keys or other custom, user-defined parameters. Please see the [plugin specification](plugin_spec.md) for more information.\n\n\n    plugman search <plugin keywords>\n\n* Search the [Plugin registry](http://plugins.cordova.io) for plugin id\'s that match the given space separated list of keywords.\n\n\n    plugman config set registry <url-to-registry>\n    plugman config get registry\n\n* Get or set the URL of the current plugin registry that plugman is using. Generally you should leave this set at http://registry.cordova.io unless you want to use a third party plugin registry.\n\n## Node Module Usage\nThis section details how to consume Plugman as a node module and is only for Cordova tool authors and other hackers. You should not need to read this section if you are just using Plugman to manage a Cordova project.\n\n    node\n    > require(\'plugman\')\n    { install: [Function: installPlugin],\n      uninstall: [Function: uninstallPlugin],\n      fetch: [Function: fetchPlugin],\n      search: [Function: search],\n      publish: [Function: publish],\n      unpublish: [Function: unpublish],\n      adduser: [Function: adduser],\n      prepare: [Function: handlePrepare],\n      create: [Function: create],\n      platform: [Function: platform] }\n\n### `install` method\n\n    module.exports = function installPlugin(platform, project_dir, id, plugins_dir, subdir, cli_variables, www_dir, callback) {\n\nInstalls a plugin into a specified cordova project of a specified platform.\n\n * `platform`: one of `amazon-fireos`, `android`, `ios`, `blackberry10`, `wp7` or `wp8`\n * `project_dir`: path to an instance of the above specified platform\'s cordova project\n * `id`: a string representing the `id` of the plugin, a path to a cordova plugin with a valid `plugin.xml` file, or an `https://` or `git://` url to a git repository of a valid cordova plugin or a plugin published to the Cordova registry\n * `plugins_dir`: path to directory where plugins will be stored, defaults to `<project_dir>/cordova/plugins`\n * `subdir`: subdirectory within the plugin directory to consider as plugin directory root, defaults to `.`\n * `cli_variables`: an object mapping cordova plugin specification variable namess (see [plugin specification](plugin_spec.md)) to values\n * `www_dir`: path to directory where web assets are to be copied to, defaults to the specified project directory\'s `www` dir (dependent on platform)\n * `callback`: callback to invoke once complete. If specified, will pass in an error object as a first parameter if the action failed. If not and an error occurs, `plugman` will throw the error\n\n### `uninstall` method\n\n    module.exports = function uninstallPlugin(platform, project_dir, id, plugins_dir, cli_variables, www_dir, callback) {\n\nUninstalls a previously-installed cordova plugin from a specified cordova project of a specified platform.\n\n * `platform`: one of `amazon-fireos`, `android`, `ios`, `blackberry10`, `wp7` or `wp8`\n * `project_dir`: path to an instance of the above specified platform\'s cordova project\n * `id`: a string representing the `id` of the plugin\n * `plugins_dir`: path to directory where plugins are stored, defaults to `<project_dir>/cordova/plugins`\n * `subdir`: subdirectory within the plugin directory to consider as plugin directory root, defaults to `.`\n * `cli_variables`: an object mapping cordova plugin specification variable namess (see [plugin specification](plugin_spec.md)) to values\n * `www_dir`: path to directory where web assets are to be copied to, defaults to the specified project directory\'s `www` dir (dependent on platform)\n * `callback`: callback to invoke once complete. If specified, will pass in an error object as a first parameter if the action failed. If not and an error occurs, `plugman` will throw the error\n\n### `fetch` method\n\nCopies a cordova plugin into a single location that plugman uses to track which plugins are installed into a project.\n\n    module.exports = function fetchPlugin(plugin_dir, plugins_dir, link, subdir, git_ref, callback) {\n\n * `plugin_dir`: path, URL to a plugin directory/repository or name of a plugin published to the Cordova registry.\n * `plugins_dir`: path housing all plugins used in this project\n * `link`: if `plugin_dir` points to a local path, will create a symbolic link to that folder instead of copying into `plugins_dir`, defaults to `false`\n * `subdir`: subdirectory within the plugin directory to consider as plugin directory root, defaults to `.`\n * `gitref`: if `plugin_dir` points to a URL, this value will be used to pass into `git checkout` after the repository is cloned, defaults to `HEAD`\n * `callback`: callback to invoke once complete. If specified, will pass in an error object as a first parameter if the action failed. If not and an error occurs, `plugman` will throw the error\n\n### `prepare` method\n\nFinalizes plugin installation by making configuration file changes and setting up a JavaScript loader for js-module support.\n\n    module.exports = function handlePrepare(project_dir, platform, plugins_dir) {\n\n * `project_dir`: path to an instance of the above specified platform\'s cordova project\n * `platform`: one of `amazon-fireos`, `android`, `ios`, `blackberry10`, `wp7` or `wp8`\n * `plugins_dir`: path housing all plugins used in this project\n\n## Registry related actions\n\n### `adduser` method\n\nAdds a user account to the registry. Function takes no arguments other than a an optional callback\n\n    module.exports = function(callback) {\n\n### `publish` method\n\nPublishes plugins to the registry. `plugin_paths` is an array of plugin paths to publish to the reigstry.\n\n    module.exports = function(plugin_paths, callback) {\n\n### `unpublish` method\n\nunpublishes plugins from the registry. Can unpublish a version by specifying `plugin@version` or the whole plugin by just specifying `plugin`. `plugins` is an array of `plugin[@version]` elements.\n\n    module.exports = function(plugins, callback) {\n\n### `search` method\n\nSearches plugins in the registry. `search_opts` is an array of keywords\n\n    module.exports = function(search_opts, callback) {\n\n### `config` method\n\nConfigures registry settings. `params` is an array that describes the action\n    /*\n    * var params = [\'get\', \'registry\'];\n    * var params = [\'set\', \'registry\', \'http://registry.cordova.io\'];\n    * module.exports = function(params, callback) {\n    */\n\n## Create plugin related actions\n\n### `create` method\n\nCreates basic scaffolding for a new plugin\n\n  module.exports = function create( name, id, version, pluginPath, options, callback ) {...}\n\n* `name` : a name for the plugin\n* `id` : an id for the plugin\n* `version` : a version for the plugin\n* `pluginPath` : a path to create the plugin in\n* `options` : an array of options\n* `callback` : callback to invoke once complete. If specified, will pass in an error object as a first parameter if the action failed. If not and an error occurs, `plugman` will throw the error\n\n### `platform` method\n\nAdd/Remove a platform from a newly created plugin\n\n  module.exports = function platform( { operation: operation, platform_name: cli_opts.platform_name } );\n\n* `operation` : "add or remove"\n* `platform_name` : ios, android\n\n## Example Plugins\n\n- Google has a [bunch of plugins](https://github.com/MobileChromeApps/chrome-cordova/tree/master/plugins) which are maintained actively by a contributor to plugman\n- Adobe maintains plugins for its Build cloud service, which are open sourced and [available on GitHub](https://github.com/phonegap-build)\n- BlackBerry has a [bunch of plugins](https://github.com/blackberry/cordova-blackberry/tree/master/blackberry10/plugins) offering deep platform integration\n- Core and 3rd party plugins can be found on the [Cordova Registry](http://plugins.cordova.io).\n\n## Development\n\nBasic installation:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install -g\n\nLinking the global executable to the git repo:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n\n### Running Tests\n\n    npm test\n\n## Plugin Directory Structure\n\nA plugin is typically a combination of some web/www code, and some native code.\nHowever, plugins may have only one of these things - a plugin could be a single\nJavaScript file, or some native code with no corresponding JavaScript.\n\nHere is a sample plugin named foo with android and ios platforms support, and 2 www assets.\n\n```\nfoo-plugin/\n|- plugin.xml     # xml-based manifest\n|- src/           # native source for each platform\n|  |- android/\n|  |  `- Foo.java\n|  `- ios/\n|     |- CDVFoo.h\n|     `- CDVFoo.m\n|- README.md\n`- www/\n   |- foo.js\n   `- foo.png\n```\n\nThis structure is suggested, but not required.\n\n## Contributors\n\nSee the [package.json](package.json) file for attribution notes.\n\n## License\n\nApache License 2.0\n',
35 silly resolved     readmeFilename: 'README.md',
35 silly resolved     _id: 'plugman@0.20.2',
35 silly resolved     _from: 'plugman@' } ]
36 info install plugman@0.20.2 into /usr/local/lib
37 info installOne plugman@0.20.2
38 info /usr/local/lib/node_modules/plugman unbuild
39 verbose tar unpack /home/ftaylor92/.npm/plugman/0.20.2/package.tgz
40 silly lockFile 816dbcda-r-local-lib-node-modules-plugman tar:///usr/local/lib/node_modules/plugman
41 verbose lock tar:///usr/local/lib/node_modules/plugman /home/ftaylor92/.npm/816dbcda-r-local-lib-node-modules-plugman.lock
42 silly lockFile c25b6625-2-npm-plugman-0-20-2-package-tgz tar:///home/ftaylor92/.npm/plugman/0.20.2/package.tgz
43 verbose lock tar:///home/ftaylor92/.npm/plugman/0.20.2/package.tgz /home/ftaylor92/.npm/c25b6625-2-npm-plugman-0-20-2-package-tgz.lock
44 silly gunzTarPerm modes [ '755', '644' ]
45 error Error: EACCES, mkdir '/usr/local/lib/node_modules/plugman'
45 error  { [Error: EACCES, mkdir '/usr/local/lib/node_modules/plugman']
45 error   errno: 3,
45 error   code: 'EACCES',
45 error   path: '/usr/local/lib/node_modules/plugman',
45 error   fstream_type: 'Directory',
45 error   fstream_path: '/usr/local/lib/node_modules/plugman',
45 error   fstream_class: 'DirWriter',
45 error   fstream_stack:
45 error    [ '/usr/local/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23',
45 error      '/usr/local/lib/node_modules/npm/node_modules/mkdirp/index.js:37:53',
45 error      'Object.oncomplete (fs.js:107:15)' ] }
46 error Please try running this command again as root/Administrator.
47 error System Linux 3.2.0-60-generic-pae
48 error command "/usr/local/bin/node" "/usr/local/bin/npm" "install" "-g" "plugman"
49 error cwd /home/ftaylor92/Dropbox/Public/public-web-site/cordova-apps/tilter
50 error node -v v0.10.24
51 error npm -v 1.3.21
52 error path /usr/local/lib/node_modules/plugman
53 error fstream_path /usr/local/lib/node_modules/plugman
54 error fstream_type Directory
55 error fstream_class DirWriter
56 error code EACCES
57 error errno 3
58 error stack Error: EACCES, mkdir '/usr/local/lib/node_modules/plugman'
59 error fstream_stack /usr/local/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23
59 error fstream_stack /usr/local/lib/node_modules/npm/node_modules/mkdirp/index.js:37:53
59 error fstream_stack Object.oncomplete (fs.js:107:15)
60 verbose exit [ 3, true ]
