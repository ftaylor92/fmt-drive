<html>
<head><title>Cloud-based Passwords</title></head>
<body>
<h2>Cloud-based Passwords</h2>

Now that you can create <a href="http://www.cloudbees.com/">Cloud-based web sites</a>, you probably will want to protect user&#39;s data with passwords.<br/><br/>

This Password Protection code is for Cloud-based web sites.  
It is free for any web site to use.  Because it&#39;s meant for any site, a username, password and site-name are required to identify and verify and user&#39;s identity.  <small>(Usually for most web-sites, a site-name is not required, but that&#39;s because it can be assumed by the URL you are currently visiting)</small><br/><br/>
It is based on the Role-based Access Control(<a href="http://en.wikipedia.org/wiki/Role-Based_Access_Control">RBAC</a>) security-model, where it checks the user has the correct role to access whatever web pages or files you want protected.<br/><br/>
It is currently <a href="#JavaScript">JavaScript</a>-based and 
<a href="#Java">Java/JSP/Servlet</a>-based.<br/>
<hr/>

<a name="JavaScript"><h5>JavaScript-Based Password Protection</h5></a>
If you goto this <a href="https://fmt-password.herokuapp.com/password.htm">Cloud-Password</a> web site, and then 
<ol type="1">
<li>enter <code>username, password, and site-name</code>, you can verify that the user does not exist</li>
<li>then enter <code>username, password, site-name and role</code>, to create an account</li>
<li>then enter <code>username, password, and site-name</code> again, to verify that the user does have the correct role associated with her/him (or try this <a href="./webapp/create-account.htm">create-account.htm</a> page)</li>
<li>then enter <code>username and site-name</code>, to delete the user&#39;s account</li>
</ol>
<h6>API</h6>
After that, you can view the JavaScript and HTML Page Source, and see the JavaScript API that you are free to use on any cloud-based web site you create.<br/>
The API can be seen in the <code>getRole(), setUser(), deleteUser()</code> and <code>&lt;form action=&quot;https://fmt-password.herokuapp.com/rest/password&quot; method=&quot;POST&quot;&gt;</code> parts of the source code.<br/>
<br/>
You will have to write your own JavaScript to fit your web site&#39;s needs, just like this <a href="http://fmt-drive.herokuapp.com/public-web-site/dailybalance-js/">DailyBalance</a> web site does.
<hr/>
<a name="Java"><h5>Java/JSP/Servlet-Based Password Protection</h5></a>
<u>Try this:</u>
<ol type="1">
<li>Try accessing <a href="https://fmt-password.herokuapp.com/links/site.htm">this PRIVATE page</a>, and you will see that you cannot (if you include <code>?user=myusername&amp;password=mypassword&amp;site=password-site</code> to that <a href="https://fmt-password.herokuapp.com/links/site.htm?user=myusername&password=mypassword&site=password-site">same URL</a> it will log you in)</li>
<li>The try accessing <a href="https://fmt-password.herokuapp.com/public/site.htm">this PUBLIC page</a>, and you will see that you can</li>
<li>Then Log-in at this <a href="https://fmt-password.herokuapp.com/login.jsp">Log-In page</a>, which doesn't do much except bring to to your non-existent <code>/page</code> (you will have to create an account at the <a href="https://fmt-password.herokuapp.com/create-account.htm">create account</a> page to actually Log-in)</li>
<li>But then try accessing <a href="https://fmt-password.herokuapp.com/links/site.htm">this PRIVATE page</a> again, and you will see that you can</li>

</ol>
You can try the REST API with this 
<a href="https://fmt-password.herokuapp.com/rest/password?username=myusername&site=password-site&password=mypassword&action=GET">GET USER ROLE</a> URL, substituting &quot;myusername&quot; and &quot;mypassword&quot; with the one&#039;s you created for yourself.
<h6>How it Works</h6>
In your JavaServer application, you can place web pages and files in different folders, some protected, some open to anyone.<br/>
</ul>
<li>You'll put the <a href="./webapp/login.jsp">login.jsp</a>, <a href="./webapp/fail-login.jsp">fail-login.jsp</a>,and <a href="./webapp/create-account.htm">create-account.htm</a> in an un-protected folder. <small>(edit them to make them pretty for your web site)</small></li>
<li>You'll use the <code>AccessControlFilter</code> to protect certain web locations.  You'll tell which folders should be protected in the <a href="./webapp/WEB-INF/web.xml">web.xml</a> file (see the <code>&lt;filter&gt; and &lt;filter-mapping&gt;</code> sections of web.xml to see that pages in <code>page/ or links/</code> folders are protected).  To use <code>AccessControlFilter</code>, you'll have to include the <a href="./password.jar">password.jar</a> in your JavaServer war file</li>
<li>You'll want to define Servlet or JSP at <code>http://&lt;yoursite&gt>/page</code> in web.xml file, or just create a html file there.</li>
</ul>
</body>
</html>
